#line 2 "sass_lexer.cc"

#line 4 "sass_lexer.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define yy_create_buffer sass__create_buffer
#define yy_delete_buffer sass__delete_buffer
#define yy_flex_debug sass__flex_debug
#define yy_init_buffer sass__init_buffer
#define yy_flush_buffer sass__flush_buffer
#define yy_load_buffer_state sass__load_buffer_state
#define yy_switch_to_buffer sass__switch_to_buffer
#define yyin sass_in
#define yyleng sass_leng
#define yylex sass_lex
#define yylineno sass_lineno
#define yyout sass_out
#define yyrestart sass_restart
#define yytext sass_text
#define yywrap sass_wrap
#define yyalloc sass_alloc
#define yyrealloc sass_realloc
#define yyfree sass_free

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE sass_restart(sass_in  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int sass_leng;

extern FILE *sass_in, *sass_out;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE sass_lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-sass_lineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < sass_leng; ++yyl )\
                    if ( sass_text[yyl] == '\n' )\
                        --sass_lineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up sass_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up sass_text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via sass_restart()), so that the user can continue scanning by
	 * just pointing sass_in at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when sass_text is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int sass_leng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow sass_wrap()'s to do buffer switches
 * instead of setting up a fresh sass_in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void sass_restart (FILE *input_file  );
void sass__switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE sass__create_buffer (FILE *file,int size  );
void sass__delete_buffer (YY_BUFFER_STATE b  );
void sass__flush_buffer (YY_BUFFER_STATE b  );
void sass_push_buffer_state (YY_BUFFER_STATE new_buffer  );
void sass_pop_buffer_state (void );

static void sass_ensure_buffer_stack (void );
static void sass__load_buffer_state (void );
static void sass__init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER sass__flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE sass__scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE sass__scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE sass__scan_bytes (yyconst char *bytes,int len  );

void *sass_alloc (yy_size_t  );
void *sass_realloc (void *,yy_size_t  );
void sass_free (void *  );

#define yy_new_buffer sass__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        sass_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            sass__create_buffer(sass_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        sass_ensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            sass__create_buffer(sass_in,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define sass_wrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *sass_in = (FILE *) 0, *sass_out = (FILE *) 0;

typedef int yy_state_type;

extern int sass_lineno;

int sass_lineno = 1;

extern char *sass_text;
#define yytext_ptr sass_text

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up sass_text.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	sass_leng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 224
#define YY_END_OF_BUFFER 225
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[883] =
    {   0,
        0,    0,  225,  223,  219,  217,  223,  212,  213,  223,
      214,  223,  186,  223,  223,  223,  218,  223,  207,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  207,  207,  207,  207,    1,    2,  207,  207,  207,
      207,  207,  207,  207,  207,  207,  215,  216,  219,  217,
      207,  210,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  146,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  115,    0,    0,  145,  209,  220,    0,
        0,    0,    0,  207,  167,  167,  207,  207,  207,  207,
      170,  170,  207,  207,  207,  207,  207,  207,  102,  207,

      207,  207,  207,  207,  207,  207,  207,  207,  104,  207,
      207,  207,  106,  207,  207,  207,  207,   34,  108,  207,
      207,  207,  207,  110,  207,  207,  112,  207,  207,  164,
      164,  207,  207,  207,  207,  207,  207,  207,  207,  207,
       35,  207,  207,    0,  207,    0,  207,    0,  207,  207,
      207,  207,    0,  207,    0,    0,  164,    0,    0,    0,
        0,    0,    0,  168,    0,  144,    0,  127,    0,    0,
        0,    0,    0,  130,  132,  162,  120,  134,  136,    0,
      138,    0,    0,    0,    0,    0,    0,  152,    0,    0,
        0,    0,    0,    0,    0,    0,  157,  121,    0,  220,

        0,    0,  208,    0,  167,  207,   93,    4,   85,    5,
      100,    6,   91,    7,    8,  207,  207,  207,  207,  207,
      207,  103,   14,  207,   15,   16,  207,  207,  207,  207,
      207,  207,  207,   27,  207,  105,   28,  207,   29,  107,
       30,   31,  207,  207,  207,  207,  207,  207,   86,  109,
       57,   58,  207,   67,  111,   68,   70,   71,  113,   72,
       99,  166,  165,   73,   92,   74,   76,   78,   79,   80,
       32,   82,   83,   81,  207,   84,   33,   94,  207,    0,
      207,    0,  207,  207,    0,  207,  207,  207,  207,    0,
      207,    0,    0,  166,  165,    0,    0,    0,  125,  124,

        0,    0,    0,  128,  149,  150,  151,    0,    0,  131,
      133,  135,  137,  126,  139,    0,    0,    0,    0,  147,
        0,  153,  154,  155,  123,  116,    0,    0,  158,  160,
      159,  161,    0,  211,    0,  208,    0,  167,  207,    0,
        9,   12,   11,   10,   13,   26,   96,   17,   20,   89,
       90,   22,   25,  207,  207,  207,   97,   36,   40,   88,
       87,   46,   41,   56,    0,  207,    0,  207,  207,  171,
      171,  207,  101,    0,  207,    0,  207,  207,    0,    0,
        0,  207,  207,  207,  207,    0,  207,    0,    0,    0,
        0,    0,  114,    0,  118,    0,    0,    0,    0,    0,

      148,  156,  141,    0,    0,  180,    0,  167,    0,  207,
      207,  207,  207,  207,   98,    0,  207,    0,  207,    0,
      207,    0,    0,    0,    0,    0,   69,    0,  207,   77,
       95,  177,    0,    0,    0,  207,    0,    0,    0,  207,
        0,  207,  207,    0,  207,    0,  221,    0,    0,  222,
      142,  129,  119,  122,  163,    0,  117,    0,    0,    0,
        0,    0,   18,  207,   23,  207,  207,    0,   38,    0,
        0,   44,    0,    0,    0,   50,    0,   60,    0,    0,
        0,    0,  207,    0,    0,    0,    0,  207,    0,    0,
      192,  207,    0,  207,    0,    0,  207,    0,    0,    0,

        0,  143,    0,  185,    0,    0,   19,   21,   24,    0,
      207,    0,   39,    0,    0,   45,    0,    0,    0,    0,
       53,   59,    0,    0,    0,    0,    0,   62,    0,  207,
      175,    0,    0,    0,    0,  207,    0,  191,    0,    0,
        0,  207,  179,  207,    0,    0,  169,  207,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  207,    0,   43,
       42,    0,    0,    0,    0,    0,    0,    0,    0,   64,
        0,    0,    0,  207,    0,    0,    0,  207,    0,    0,
        0,    0,  207,  207,    0,    0,    0,  207,    0,    0,
      188,    0,  140,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,   63,    0,   66,
        0,  207,    0,  183,    0,  207,    0,    0,    0,    0,
        0,  207,    0,    0,    0,    0,    0,  187,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   61,    0,   75,   75,    0,    0,
        0,    0,  207,    0,    0,    0,  193,  192,    0,  207,
        0,    0,  204,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  184,   37,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  207,  191,    0,    0,
        0,    0,    0,    0,    0,  203,    0,    0,    0,  178,

        0,    0,    0,    0,    0,    0,    0,    0,    0,   48,
       47,    0,    0,    0,    0,   65,    0,    0,  200,    0,
      207,    0,  194,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  189,  188,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  199,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  196,  182,    0,
        0,    0,    0,  187,    0,    0,    0,    0,    0,    0,
        0,   51,   52,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  193,    0,  195,    0,    0,    0,    0,    0,
        0,  205,  204,    0,  190,    0,    0,    0,    0,    0,

       49,   54,   55,    0,    0,    0,    0,  176,  181,    0,
        0,    0,    0,    0,  203,    0,    0,    0,    0,  174,
        0,  173,  172,    0,    0,    0,  201,  200,  194,    0,
        0,    0,    0,    0,  206,    0,    0,  189,    0,  199,
        0,    0,    0,    0,    0,  197,  196,    0,    0,    0,
        0,    0,  202,    0,  195,    0,    0,    0,  205,  190,
        0,    0,    0,    0,  198,    0,    0,    0,    0,  201,
        0,    0,  206,    0,    0,    0,  197,    3,  202,    0,
      198,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    1,    6,    7,    1,    1,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
       19,   20,   21,   22,   21,   23,   21,   24,   25,    1,
       26,    1,    1,    1,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   36,
       52,    1,   53,    1,   54,    1,   55,   56,   57,   58,

       59,   60,   61,   62,   63,   36,   36,   64,   65,   66,
       67,   68,   36,   69,   70,   71,   72,   73,   36,   74,
       36,   75,    1,   76,    1,   77,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[78] =
    {   0,
        1,    2,    3,    2,    4,    4,    1,    1,    1,    1,
        1,    1,    1,    2,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    1,    2,    1,    5,    5,    5,    5,
        5,    5,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    1,    1,    4,    5,    5,    5,    5,    5,    5,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    1,    1
    } ;

static yyconst flex_int16_t yy_base[912] =
    {   0,
        0,    0, 1524, 1525,   76, 1520,    0, 1525, 1525, 1507,
     1525,   66,  129,   71,  164,   33, 1525, 1495,  223,  268,
       71,   69,   75,   77,   93,    0,  108,  167,   58,  103,
     1492,  313,  172, 1488, 1477,  209, 1525,  101,   73,  310,
      101, 1450, 1458, 1448, 1510, 1444, 1451, 1525,  144, 1508,
        0, 1525, 1497,   35,  240, 1505,  125, 1441, 1446, 1492,
      112, 1474,  286, 1461,  321,  105, 1468, 1458,  109, 1474,
      147, 1459, 1468,  328, 1454,  252, 1525, 1481,    0, 1440,
        0,    0, 1469,    0,  362, 1450,  348,  379,  391,  312,
      407,  420,  428, 1448,  437,  452,  326, 1461, 1444,  229,

      460,  480,  458, 1459,  495, 1423, 1444, 1441, 1439, 1455,
     1453, 1437, 1435,  167, 1451,  459,  184, 1435, 1432, 1460,
     1447, 1434, 1429, 1427, 1425,   68, 1425, 1429, 1433,  490,
      509, 1427, 1422, 1426, 1423, 1421,  128, 1424, 1409, 1411,
     1416, 1410, 1413, 1446, 1400, 1404,  145, 1403, 1387, 1383,
     1393, 1394, 1398, 1382, 1372, 1434,  539, 1379, 1388, 1430,
     1405, 1391, 1391, 1525, 1396, 1525, 1404, 1391, 1415, 1418,
     1415, 1396, 1392, 1385, 1384, 1525, 1525, 1383, 1382, 1398,
     1380,  474, 1384, 1395,  215, 1406, 1403, 1525, 1376, 1374,
     1387, 1372, 1396, 1397, 1398, 1395, 1525, 1525,  127,    0,

        0, 1351, 1366, 1386,  562,  579,    0,  587, 1397,    0,
        0,    0,    0,    0,    0,  607, 1383, 1359, 1368, 1369,
     1360,    0,    0, 1359,  622,    0,  630,  218, 1364, 1365,
     1356, 1345, 1343,    0, 1358,    0,    0, 1368,    0,    0,
        0,    0, 1367,  243, 1356, 1357, 1364, 1347,    0,    0,
        0,    0, 1378,    0,    0, 1372,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  660, 1371,    0,    0,    0,
        0,    0,    0,    0,  737,    0,    0, 1370, 1357,  660,
     1325, 1370, 1326, 1316,  250, 1327, 1311, 1315, 1325, 1363,
     1320, 1373, 1363, 1525, 1525, 1319, 1319, 1359, 1525, 1525,

     1326, 1327, 1332, 1525, 1525, 1525, 1525, 1324, 1327, 1525,
     1525, 1525, 1525, 1525, 1525, 1336, 1326, 1311, 1335, 1525,
     1340, 1525, 1525, 1525, 1525, 1525, 1322, 1321, 1525, 1525,
     1525, 1525,    0, 1525, 1289, 1525, 1333,  671,    0, 1331,
        0,    0,    0,    0,    0,    0,    0, 1338, 1337,    0,
        0, 1336,    0, 1291, 1282, 1313,    0,  140,  190,    0,
        0,  253,    0,    0,  522, 1333, 1303, 1302, 1330,    0,
      814, 1329,    0, 1293, 1341,  272, 1340, 1280,  302,  679,
      687, 1287, 1337, 1269, 1275,  413, 1266, 1285, 1323, 1280,
     1270, 1319, 1525, 1281, 1525, 1300, 1286, 1287, 1299, 1282,

     1525, 1525, 1525, 1297,  521, 1525, 1299,  698, 1280, 1305,
     1304, 1303, 1254, 1256,    0, 1289, 1299,  189, 1298,  341,
     1297, 1274, 1269, 1285, 1297, 1269,    0, 1292, 1291,    0,
        0, 1525, 1281,    0,  314, 1242,    0,  711,  748, 1241,
     1278, 1240, 1298,    0, 1244,  388, 1287, 1235, 1294, 1283,
      737, 1525, 1525, 1525, 1525, 1261, 1525,  535, 1280,  542,
     1268, 1245, 1257, 1256, 1255, 1285, 1221, 1260, 1251, 1267,
     1266, 1248, 1247, 1263, 1262,  306, 1249, 1525, 1233,  735,
     1233, 1254, 1253, 1270,  263, 1206, 1213, 1212,  437,  554,
     1256, 1252, 1264, 1207, 1214,  479, 1206,  415,  775,  786,

     1247, 1525, 1230, 1525, 1236, 1247,    0,    0,    0,  393,
     1194, 1215,    0, 1238, 1237,    0, 1242, 1235, 1234,  274,
     1239, 1525, 1207, 1211, 1206, 1222, 1207, 1525,    0,  891,
     1525, 1194, 1242, 1176, 1175, 1189, 1189, 1227, 1229,  500,
     1192, 1218, 1525, 1174,  389, 1183, 1525, 1166,    0,  825,
      833, 1214, 1193, 1206, 1182, 1166, 1158, 1224, 1183, 1525,
     1525, 1179, 1211, 1210, 1205, 1204,  524, 1167, 1190, 1525,
     1174, 1174, 1170, 1169, 1163, 1210, 1143, 1142, 1164, 1194,
        0, 1192, 1204, 1148,  501,  841,  852, 1202,  610,  600,
     1191, 1200, 1525, 1177, 1175, 1141, 1126, 1175, 1147, 1179,

     1151, 1148, 1174, 1173, 1174, 1173, 1162, 1525, 1144, 1525,
     1165, 1164,  756, 1525, 1123, 1122, 1167,  538,  612, 1161,
     1130, 1112,    0,  902,  861, 1154, 1126, 1164, 1166,  581,
     1129, 1149, 1139, 1169, 1168, 1167,  910, 1150, 1151, 1150,
     1153, 1152, 1145, 1144, 1525, 1109, 1525,    0,  582,  918,
      929, 1095, 1086, 1138,    0, 1106, 1144, 1525,  772, 1153,
      688,  762, 1142, 1151, 1107, 1137,    0, 1135, 1125, 1104,
     1092, 1091, 1525, 1525, 1133, 1126, 1125, 1099, 1096, 1128,
     1127, 1112,    0,  942,  953, 1073, 1079, 1525,  727, 1090,
      584,  961,  969, 1110, 1082, 1120, 1122,  701, 1085, 1525,

     1114,  736,  734, 1108, 1103, 1124, 1060, 1059, 1078, 1525,
     1525, 1106, 1105, 1077, 1074, 1525,  765,  768, 1106, 1115,
     1114, 1064, 1102, 1098,    0,  982,  991, 1110, 1066, 1096,
        0, 1094, 1088,    0, 1056, 1094, 1525, 1081, 1050, 1047,
     1046, 1085, 1082, 1081, 1082, 1081, 1045, 1083, 1085,  761,
     1048, 1068, 1067, 1045, 1069,  781,  821, 1076, 1525, 1072,
      815,  786, 1066, 1525,  841, 1040, 1060, 1069, 1025, 1024,
     1062, 1525, 1525, 1061, 1060, 1032, 1060,    0, 1054, 1061,
     1056, 1039, 1525,  998, 1029, 1031,  835,  994, 1018,    0,
      986, 1024, 1525,  984, 1022, 1018, 1008, 1021, 1008, 1007,

     1525, 1525, 1525, 1013,  837,  968, 1007, 1525, 1525, 1006,
      980, 1010,    0, 1003, 1525,  969,  950,  949,  973, 1525,
      990, 1525, 1525,  935,    0,  903,  941, 1525, 1525,  937,
      892,  970,  890,  857,  894,  890,  880, 1525,  880, 1525,
      971,  829,  809,    0,  777,  806, 1525,  772,  760,  721,
      668,  686,  712,  708, 1525,  972,  677,  706, 1525, 1525,
      651,   37,  111,   88,  221,  232,  243,  216,  284, 1525,
      264,  296, 1525,  296,  350,  386, 1525, 1525, 1525,  409,
     1525, 1525, 1041, 1043, 1048,  429,  457,  483, 1053, 1058,
      502, 1063,  517,  524,  525, 1068, 1073,  528,  536,  543,

      571,  581,  582,  608,  609,  610,  628,  630,  631,  649,
      661
    } ;

static yyconst flex_int16_t yy_def[912] =
    {   0,
      882,    1,  882,  882,  882,  882,  883,  882,  882,  882,
      882,  882,  882,  882,  882,   15,  882,  882,  884,  884,
       20,   20,   20,   20,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  882,  882,   20,   20,   20,
      884,  884,  884,  884,  884,  884,  882,  882,  882,  882,
      883,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  885,  886,
      886,  887,  882,  884,  884,   85,   85,   85,   85,  884,
       85,   85,   85,  884,   85,   85,  884,  884,  884,  884,

       85,   85,  884,  884,   85,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,   32,
       32,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  882,  884,  882,  884,  882,  884,  884,
      884,  884,  882,  884,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  885,

      888,  888,  887,  882,  884,  205,  884,  205,  884,  884,
      884,  884,  884,  884,  884,  205,  884,  884,  884,  884,
      884,  884,  884,  884,  205,  884,  205,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  889,  884,  884,  884,  884,
      884,  884,  884,  884,  890,  884,  884,  884,  884,  882,
      884,  882,  884,  884,  882,  884,  884,  884,  884,  882,
      884,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  891,  882,  882,  882,  882,  884,  884,  882,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  884,  884,  884,  884,  884,  884,
      884,  884,  884,  884,  882,  884,  882,  884,  884,  892,
      890,  884,  884,  882,  884,  882,  884,  884,  882,  882,
      882,  884,  884,  884,  884,  882,  884,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  891,  882,  882,  884,  882,  884,
      884,  884,  884,  884,  884,  882,  884,  882,  884,  882,
      884,  882,  882,  882,  882,  882,  884,  882,  884,  884,
      884,  882,  882,  893,  882,  884,  894,  882,  882,  884,
      882,  884,  884,  895,  884,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  884,  884,  884,  884,  884,  882,  884,  882,
      882,  884,  882,  882,  882,  884,  882,  882,  882,  882,
      882,  882,  884,  882,  893,  882,  882,  884,  894,  882,
      882,  884,  882,  884,  882,  895,  884,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  884,  884,  884,  882,
      884,  882,  884,  882,  882,  884,  882,  882,  882,  882,
      884,  882,  882,  882,  882,  882,  882,  882,  896,  897,
      882,  882,  882,  882,  882,  884,  882,  882,  882,  882,
      882,  884,  882,  884,  882,  882,  882,  884,  898,  882,
      882,  882,  882,  882,  882,  882,  882,  884,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  884,  882,  882,  882,  884,  882,  882,
      899,  882,  884,  884,  882,  882,  882,  884,  898,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  884,  882,  882,  882,  884,  882,  882,  899,  882,
      882,  884,  900,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  884,  882,  882,
      882,  882,  884,  882,  901,  882,  882,  882,  882,  884,
      900,  882,  882,  882,  882,  882,  902,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  903,  882,  882,  882,  884,  882,  901,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  902,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  903,  882,  882,  882,
      884,  882,  882,  882,  904,  882,  882,  882,  882,  882,
      905,  882,  882,  906,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  904,  882,  882,  882,  882,
      882,  905,  882,  882,  906,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  907,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  908,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  907,  882,  882,  882,  882,
      882,  882,  909,  882,  882,  908,  882,  882,  882,  882,
      882,  882,  882,  882,  910,  882,  882,  882,  882,  882,
      882,  909,  882,  882,  882,  882,  882,  882,  882,  882,
      910,  882,  882,  911,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  911,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,    0,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882
    } ;

static yyconst flex_int16_t yy_nxt[1603] =
    {   0,
        4,    5,    6,    5,    4,    7,    7,    8,    9,   10,
        4,   11,   12,   13,   14,   15,   16,   16,   16,   16,
       16,   16,   16,    4,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   26,   26,   28,   29,   30,
       26,   31,   26,   32,   33,   34,   26,   35,   26,   26,
       26,   36,   37,    7,   38,   39,   40,   39,   39,   39,
       41,   42,   43,   44,   26,   26,   45,   46,   26,   26,
       26,   26,   26,   26,   26,   47,   48,   49,   53,   49,
       78,   54,  882,  869,   82,   79,   91,   91,   92,   91,
       91,   91,   91,   91,  101,   95,  257,   93,  125,   87,

       96,   87,  258,  102,  148,  126,  882,   97,   82,   55,
      107,   94,   84,   98,   84,  103,   84,   99,   84,  108,
       84,  104,   56,  109,  100,  114,   57,   87,  148,   58,
      110,  105,  870,  127,  115,  174,  111,  112,  113,  178,
      865,   59,   60,  128,   84,   49,  116,   49,  106,  161,
      175,  162,  117,  416,  179,   61,   62,   63,  417,   64,
       65,   66,   67,   68,  149,  272,   69,   70,   71,  145,
       72,  273,   73,   74,   75,   76,  333,  181,   77,   80,
       80,   80,   80,   80,   80,   80,   80,  182,  158,  136,
       81,   81,   81,   81,   81,   81,  118,  119,  241,  120,

      333,  242,  283,  418,  121,  137,  138,  122,  419,  284,
      247,  123,  124,   82,  248,  139,  140,  141,   81,   81,
       81,   81,   81,   81,  144,  144,  144,  144,  144,  144,
      144,  144,  321,  470,  871,  471,  322,   82,   85,   85,
       86,   85,   85,   85,   85,   85,  223,  349,  872,   87,
       87,   87,   88,   87,   87,  157,  157,  157,  157,  157,
      157,  157,  157,  224,  873,  379,  420,  350,  193,  194,
      195,  421,  359,  196,  197,  874,  380,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,  198,  360,  381,   89,   87,   87,   87,   87,   87,

      875,  164,  164,  164,  164,  164,  164,  164,  164,  532,
      876,   90,  165,  146,  166,  533,  167,  877,  565,  520,
      566,  434,   87,   87,   87,   87,   87,   87,  130,  130,
      131,  130,  130,  130,  130,  130,   87,  169,  210,  170,
      521,  132,  171,  133,  185,  434,  186,  172,  211,  187,
      188,  437,  218,   84,  189,  878,  134,  135,  173,  190,
      219,  212,  191,  206,  206,  206,  206,  206,  206,  206,
      206,  879,  220,  486,  473,  437,  147,  205,  205,  205,
      205,  205,  205,  205,  205,  474,  487,  475,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,

      206,  206,  880,  498,  585,  208,  206,  206,  206,  206,
      206,  206,  206,  206,  499,  586,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      881,  500,  587,  201,  209,  206,  206,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  556,  206,  206,  206,  206,  206,  206,  206,  206,
      557,  203,  444,  213,  549,  214,  216,  206,  206,  206,
      206,  206,  206,  206,  206,  206,  206,  206,  206,  206,
      206,  206,  206,  537,  228,  244,  444,  334,  549,  538,
      217,  225,  229,  245,  226,  206,  206,  206,  206,  206,

      206,  206,  206,  316,  230,  246,  405,  130,  317,  227,
      206,  206,  206,  206,  206,  206,  206,  206,   84,  318,
       84,  485,  458,  262,  458,  546,  130,  263,  489,  496,
      459,  547,  589,   84,   84,  264,  458,  265,  458,   84,
      619,  266,  262,  458,  459,  458,  263,  661,  422,  581,
      623,  459,   84,   84,  157,  157,  157,  157,  157,  157,
      157,  157,  423,  424,  539,  232,  425,  460,  605,  540,
      606,  426,  294,  581,  623,  689,  295,  338,  338,  338,
      338,  338,  338,  338,  338,  703,  717,  655,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,

      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      629,  655,  756,  762,  765,  630,  339,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      667,  683,  806,  725,  816,  832,  341,  339,  339,  339,
      339,  339,  339,  339,  339,  339,  339,  339,  339,  339,
      339,  339,  339,  841,  667,  683,  627,  725,  656,  348,
      367,  367,  628,  367,  657,  856,  367,  367,  367,  367,
      367,  367,  367,  367,  367,  374,  374,  374,  374,  374,
      374,  374,  374,  367,  367,  367,  408,  408,  408,  408,
      408,  408,  408,  408,  438,  438,  438,  438,  438,  438,

      438,  438,  439,  439,  439,  439,  439,  439,  439,  439,
      868,  367,  367,  408,  408,  408,  408,  408,  408,  408,
      408,  490,  867,  866,  863,  862,  438,  438,  438,  438,
      438,  438,  438,  438,  695,  367,  367,  370,  853,  370,
      696,  861,  860,  370,  370,  370,  370,  370,  370,  370,
      731,  370,  502,  502,  502,  502,  502,  502,  502,  502,
      370,  524,  370,  439,  439,  439,  439,  439,  439,  439,
      439,  649,  697,  722,  731,  525,  526,  698,  749,  723,
      735,  859,  650,  750,  527,  734,  736,  691,  370,  370,
      550,  550,  550,  550,  550,  550,  550,  550,  692,  651,

      491,  551,  551,  551,  551,  551,  551,  551,  551,  734,
      778,  747,  370,  370,  370,  693,  370,  748,  858,  857,
      370,  370,  370,  370,  370,  370,  370,  784,  370,  846,
      855,  786,  791,  785,  778,  590,  787,  370,  792,  370,
      550,  550,  550,  550,  550,  550,  550,  550,  551,  551,
      551,  551,  551,  551,  551,  551,  624,  624,  624,  624,
      624,  624,  624,  624,  790,  370,  370,  625,  625,  625,
      625,  625,  625,  625,  625,  854,  625,  625,  625,  625,
      625,  625,  625,  625,  813,  591,  825,  794,  790,  370,
      370,  573,  573,  795,  573,  851,  850,  573,  573,  573,

      573,  573,  573,  573,  573,  573,  849,  848,  813,  835,
      825,  847,  662,  663,  573,  573,  573,  624,  624,  624,
      624,  624,  624,  624,  624,  674,  674,  674,  674,  674,
      674,  674,  674,  684,  684,  684,  684,  684,  684,  684,
      684,  844,  573,  573,  685,  685,  685,  685,  685,  685,
      685,  685,  718,  843,  842,  827,  840,  684,  684,  684,
      684,  684,  684,  684,  684,  844,  573,  573,  685,  685,
      685,  685,  685,  685,  685,  685,  726,  726,  726,  726,
      726,  726,  726,  726,  727,  727,  727,  727,  727,  727,
      727,  727,  757,  839,  838,  837,  836,  726,  726,  726,

      726,  726,  726,  726,  726,  719,  727,  727,  727,  727,
      727,  727,  727,  727,  826,  834,  845,  852,  864,  833,
      827,  835,  846,  853,  865,  831,  830,  829,  828,  824,
      823,  822,  821,  820,  819,  818,  795,  817,  792,  815,
      814,  812,  811,  758,   51,   51,   84,   84,  200,  200,
      785,  200,  200,  368,  368,  810,  368,  368,  371,  809,
      371,  371,  371,  370,  808,  370,  370,  370,  573,  573,
      807,  573,  573,  574,  574,  805,  574,  574,  804,  803,
      802,  801,  800,  799,  798,  797,  796,  793,  789,  788,
      783,  782,  781,  780,  779,  777,  776,  748,  775,  774,

      773,  772,  771,  770,  769,  768,  767,  766,  736,  764,
      763,  761,  760,  759,  755,  754,  723,  753,  752,  751,
      746,  745,  744,  743,  742,  741,  740,  739,  738,  737,
      733,  732,  730,  729,  696,  728,  724,  721,  720,  716,
      715,  714,  713,  712,  711,  710,  709,  708,  707,  706,
      705,  704,  702,  701,  700,  699,  694,  690,  657,  688,
      687,  686,  682,  681,  680,  679,  678,  677,  676,  675,
      673,  672,  671,  670,  669,  668,  666,  665,  628,  664,
      660,  659,  658,  654,  653,  652,  648,  647,  646,  645,
      644,  643,  642,  641,  640,  639,  638,  637,  636,  635,

      634,  633,  632,  621,  631,  626,  622,  621,  620,  618,
      617,  616,  615,  614,  613,  612,  611,  610,  609,  608,
      607,  604,  603,  602,  601,  600,  599,  598,  597,  596,
      595,  594,  593,  592,  588,  547,  584,  583,  582,  580,
      579,  538,  578,  577,  576,  575,  533,  572,  571,  570,
      569,  568,  567,  564,  563,  562,  561,  560,  559,  558,
      555,  554,  553,  552,  548,  545,  544,  543,  542,  541,
      536,  535,  534,  531,  530,  529,  528,  523,  522,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,
      508,  507,  506,  505,  504,  503,  450,  495,  501,  447,

      497,  495,  494,  493,  492,  488,  484,  483,  482,  481,
      480,  479,  478,  477,  476,  472,  469,  468,  467,  466,
      465,  464,  463,  462,  461,  457,  456,  455,  454,  453,
      452,  451,  450,  449,  448,  447,  446,  445,  443,  442,
      441,  440,  436,  435,  433,  432,  431,  430,  429,  428,
      427,  415,  414,  413,  412,  411,  410,  409,  407,  406,
      404,  403,  402,  401,  400,  399,  398,  397,  396,  395,
      394,  393,  392,  391,  390,  389,  388,  387,  386,  385,
      384,  383,  382,  378,  377,  376,  375,  373,  372,  369,
      366,  365,  364,  363,  362,  361,  358,  357,  356,  355,

      354,  353,  352,  351,  347,  346,  345,  344,  343,  342,
      340,  337,  336,  335,  332,  331,  330,  329,  328,  327,
      326,  325,  324,  323,  320,  319,  315,  314,  313,  312,
      311,  310,  309,  308,  307,  306,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  293,  292,  291,  290,
      289,  288,  287,  286,  285,  282,  281,  280,  279,  278,
      277,  276,  275,  274,  271,  270,  269,  268,  267,  261,
      260,  259,  256,  255,  254,  253,  252,  251,  250,  249,
      243,  240,  239,  238,  237,  236,  235,  234,  233,  231,
      222,  221,  215,  207,  204,  202,  199,  192,  184,  183,

      180,  177,  176,  168,  163,  160,  155,  159,  146,  156,
       50,  155,  154,  153,  152,  151,  150,  143,  142,  129,
       83,   52,   50,  882,    3,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882
    } ;

static yyconst flex_int16_t yy_chk[1603] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,   12,    5,
       14,   12,   16,  862,   54,   14,   21,   21,   21,   21,
       21,   21,   21,   21,   24,   22,  126,   21,   29,   39,

       22,   23,  126,   24,   41,   29,   16,   22,   54,   12,
       25,   21,   22,   22,   21,   24,   39,   23,   23,   25,
       24,   24,   12,   25,   23,   27,   12,   38,   57,   12,
       25,   24,  863,   30,   27,   66,   25,   25,   25,   69,
      864,   12,   13,   30,   38,   49,   27,   49,   24,   61,
       66,   61,   27,  358,   69,   13,   13,   13,  358,   13,
       13,   13,   13,   13,   41,  137,   13,   13,   13,   38,
       13,  137,   13,   13,   13,   13,  199,   71,   13,   15,
       15,   15,   15,   15,   15,   15,   15,   71,   57,   33,
       15,   15,   15,   15,   15,   15,   28,   28,  114,   28,

      199,  114,  147,  359,   28,   33,   33,   28,  359,  147,
      117,   28,   28,   15,  117,   33,   33,   33,   15,   15,
       15,   15,   15,   15,   36,   36,   36,   36,   36,   36,
       36,   36,  185,  418,  865,  418,  185,   15,   19,   19,
       19,   19,   19,   19,   19,   19,  100,  228,  866,   19,
       19,   19,   19,   19,   19,   55,   55,   55,   55,   55,
       55,   55,   55,  100,  867,  285,  362,  228,   76,   76,
       76,  362,  244,   76,   76,  868,  285,   19,   19,   19,
       19,   19,   19,   20,   20,   20,   20,   20,   20,   20,
       20,   76,  244,  285,   20,   20,   20,   20,   20,   20,

      869,   63,   63,   63,   63,   63,   63,   63,   63,  485,
      871,   20,   63,   40,   63,  485,   63,  872,  520,  476,
      520,  376,   20,   20,   20,   20,   20,   20,   32,   32,
       32,   32,   32,   32,   32,   32,   40,   65,   90,   65,
      476,   32,   65,   32,   74,  376,   74,   65,   90,   74,
       74,  379,   97,   40,   74,  874,   32,   32,   65,   74,
       97,   90,   74,   87,   87,   87,   87,   87,   87,   87,
       87,  875,   97,  435,  420,  379,   40,   85,   85,   85,
       85,   85,   85,   85,   85,  420,  435,  420,   85,   85,
       85,   85,   85,   85,   88,   88,   88,   88,   88,   88,

       88,   88,  876,  446,  545,   88,   89,   89,   89,   89,
       89,   89,   89,   89,  446,  545,   85,   85,   85,   85,
       85,   85,   91,   91,   91,   91,   91,   91,   91,   91,
      880,  446,  545,  886,   89,   92,   92,   92,   92,   92,
       92,   92,   92,   93,   93,   93,   93,   93,   93,   93,
       93,  510,   95,   95,   95,   95,   95,   95,   95,   95,
      510,  887,  386,   92,  498,   93,   95,   96,   96,   96,
       96,   96,   96,   96,   96,  101,  101,  101,  101,  101,
      101,  101,  101,  489,  103,  116,  386,  888,  498,  489,
       96,  101,  103,  116,  101,  102,  102,  102,  102,  102,

      102,  102,  102,  182,  103,  116,  891,  130,  182,  102,
      105,  105,  105,  105,  105,  105,  105,  105,  130,  182,
      130,  893,  405,  130,  405,  496,  131,  130,  894,  895,
      405,  496,  898,  130,  130,  131,  458,  131,  458,  131,
      899,  131,  131,  460,  458,  460,  131,  900,  365,  540,
      585,  460,  131,  131,  157,  157,  157,  157,  157,  157,
      157,  157,  365,  365,  490,  105,  365,  405,  567,  490,
      567,  365,  157,  540,  585,  901,  157,  205,  205,  205,
      205,  205,  205,  205,  205,  902,  903,  618,  205,  205,
      205,  205,  205,  205,  206,  206,  206,  206,  206,  206,

      206,  206,  208,  208,  208,  208,  208,  208,  208,  208,
      590,  618,  904,  905,  906,  590,  205,  205,  205,  205,
      205,  205,  216,  216,  216,  216,  216,  216,  216,  216,
      630,  649,  907,  691,  908,  909,  216,  225,  225,  225,
      225,  225,  225,  225,  225,  227,  227,  227,  227,  227,
      227,  227,  227,  910,  630,  649,  589,  691,  619,  227,
      266,  266,  589,  266,  619,  911,  266,  266,  266,  266,
      266,  266,  266,  266,  266,  280,  280,  280,  280,  280,
      280,  280,  280,  266,  266,  266,  338,  338,  338,  338,
      338,  338,  338,  338,  380,  380,  380,  380,  380,  380,

      380,  380,  381,  381,  381,  381,  381,  381,  381,  381,
      861,  266,  266,  408,  408,  408,  408,  408,  408,  408,
      408,  438,  858,  857,  854,  853,  438,  438,  438,  438,
      438,  438,  438,  438,  661,  266,  266,  275,  852,  275,
      661,  851,  850,  275,  275,  275,  275,  275,  275,  275,
      698,  275,  451,  451,  451,  451,  451,  451,  451,  451,
      275,  480,  275,  439,  439,  439,  439,  439,  439,  439,
      439,  613,  662,  689,  698,  480,  480,  662,  718,  689,
      703,  849,  613,  718,  480,  702,  703,  659,  275,  275,
      499,  499,  499,  499,  499,  499,  499,  499,  659,  613,

      439,  500,  500,  500,  500,  500,  500,  500,  500,  702,
      750,  717,  275,  275,  371,  659,  371,  717,  848,  846,
      371,  371,  371,  371,  371,  371,  371,  756,  371,  845,
      843,  757,  762,  756,  750,  550,  757,  371,  762,  371,
      550,  550,  550,  550,  550,  550,  550,  550,  551,  551,
      551,  551,  551,  551,  551,  551,  586,  586,  586,  586,
      586,  586,  586,  586,  761,  371,  371,  587,  587,  587,
      587,  587,  587,  587,  587,  842,  625,  625,  625,  625,
      625,  625,  625,  625,  787,  551,  805,  765,  761,  371,
      371,  530,  530,  765,  530,  839,  837,  530,  530,  530,

      530,  530,  530,  530,  530,  530,  836,  835,  787,  834,
      805,  833,  624,  625,  530,  530,  530,  624,  624,  624,
      624,  624,  624,  624,  624,  637,  637,  637,  637,  637,
      637,  637,  637,  650,  650,  650,  650,  650,  650,  650,
      650,  831,  530,  530,  651,  651,  651,  651,  651,  651,
      651,  651,  684,  830,  827,  826,  824,  684,  684,  684,
      684,  684,  684,  684,  684,  831,  530,  530,  685,  685,
      685,  685,  685,  685,  685,  685,  692,  692,  692,  692,
      692,  692,  692,  692,  693,  693,  693,  693,  693,  693,
      693,  693,  726,  821,  819,  818,  817,  726,  726,  726,

      726,  726,  726,  726,  726,  685,  727,  727,  727,  727,
      727,  727,  727,  727,  806,  816,  832,  841,  856,  814,
      806,  816,  832,  841,  856,  812,  811,  810,  807,  804,
      800,  799,  798,  797,  796,  795,  794,  792,  791,  789,
      788,  786,  785,  727,  883,  883,  884,  884,  885,  885,
      784,  885,  885,  889,  889,  782,  889,  889,  890,  781,
      890,  890,  890,  892,  780,  892,  892,  892,  896,  896,
      779,  896,  896,  897,  897,  777,  897,  897,  776,  775,
      774,  771,  770,  769,  768,  767,  766,  763,  760,  758,
      755,  754,  753,  752,  751,  749,  748,  747,  746,  745,

      744,  743,  742,  741,  740,  739,  738,  736,  735,  733,
      732,  730,  729,  728,  724,  723,  722,  721,  720,  719,
      715,  714,  713,  712,  709,  708,  707,  706,  705,  704,
      701,  699,  697,  696,  695,  694,  690,  687,  686,  682,
      681,  680,  679,  678,  677,  676,  675,  672,  671,  670,
      669,  668,  666,  665,  664,  663,  660,  657,  656,  654,
      653,  652,  646,  644,  643,  642,  641,  640,  639,  638,
      636,  635,  634,  633,  632,  631,  629,  628,  627,  626,
      622,  621,  620,  617,  616,  615,  612,  611,  609,  607,
      606,  605,  604,  603,  602,  601,  600,  599,  598,  597,

      596,  595,  594,  592,  591,  588,  584,  583,  582,  580,
      579,  578,  577,  576,  575,  574,  573,  572,  571,  569,
      568,  566,  565,  564,  563,  562,  559,  558,  557,  556,
      555,  554,  553,  552,  548,  546,  544,  542,  541,  539,
      538,  537,  536,  535,  534,  533,  532,  527,  526,  525,
      524,  523,  521,  519,  518,  517,  515,  514,  512,  511,
      506,  505,  503,  501,  497,  495,  494,  493,  492,  491,
      488,  487,  486,  484,  483,  482,  481,  479,  477,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  463,  462,  461,  459,  456,  450,  449,  448,  447,

      445,  443,  442,  441,  440,  436,  433,  429,  428,  426,
      425,  424,  423,  422,  421,  419,  417,  416,  414,  413,
      412,  411,  410,  409,  407,  404,  400,  399,  398,  397,
      396,  394,  392,  391,  390,  389,  388,  387,  385,  384,
      383,  382,  378,  377,  375,  374,  372,  369,  368,  367,
      366,  356,  355,  354,  352,  349,  348,  340,  337,  335,
      328,  327,  321,  319,  318,  317,  316,  309,  308,  303,
      302,  301,  298,  297,  296,  293,  292,  291,  290,  289,
      288,  287,  286,  284,  283,  282,  281,  279,  278,  267,
      256,  253,  248,  247,  246,  245,  243,  238,  235,  233,

      232,  231,  230,  229,  224,  221,  220,  219,  218,  217,
      209,  204,  203,  202,  196,  195,  194,  193,  192,  191,
      190,  189,  187,  186,  184,  183,  181,  180,  179,  178,
      175,  174,  173,  172,  171,  170,  169,  168,  167,  165,
      163,  162,  161,  160,  159,  158,  156,  155,  154,  153,
      152,  151,  150,  149,  148,  146,  145,  144,  143,  142,
      141,  140,  139,  138,  136,  135,  134,  133,  132,  129,
      128,  127,  125,  124,  123,  122,  121,  120,  119,  118,
      115,  113,  112,  111,  110,  109,  108,  107,  106,  104,
       99,   98,   94,   86,   83,   80,   78,   75,   73,   72,

       70,   68,   67,   64,   62,   60,   59,   58,   56,   53,
       50,   47,   46,   45,   44,   43,   42,   35,   34,   31,
       18,   10,    6,    3,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,
      882,  882,  882,  882,  882,  882,  882,  882,  882,  882,

      882,  882
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[225] =
    {   0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 
    0, 0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int sass__flex_debug;
int sass__flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *sass_text;
#line 1 "sass.l"
/*
// Copyright (c) 2009-2012, Jimmy Kwa, Andrew Boktor
// The University of British Columbia
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
//
// Redistributions of source code must retain the above copyright notice, this
// list of conditions and the following disclaimer.
// Redistributions in binary form must reproduce the above copyright notice, this
// list of conditions and the following disclaimer in the documentation and/or
// other materials provided with the distribution.
// Neither the name of The University of British Columbia nor the names of its
// contributors may be used to endorse or promote products derived from this
// software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
// FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
#line 30 "sass.l"
#include <stdio.h>
#include "sass_parser.hh"
#include <string.h>


/* Not sure if this is needed*/
#define	YY_NEVER_INTERACTIVE	1

#define yylval sass_lval

void sass_error(const char*);
/*Regular expresions go here*/
#line 1206 "sass_lexer.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int sass_lex_destroy (void );

int sass_get_debug (void );

void sass_set_debug (int debug_flag  );

YY_EXTRA_TYPE sass_get_extra (void );

void sass_set_extra (YY_EXTRA_TYPE user_defined  );

FILE *sass_get_in (void );

void sass_set_in  (FILE * in_str  );

FILE *sass_get_out (void );

void sass_set_out  (FILE * out_str  );

int sass_get_leng (void );

char *sass_get_text (void );

int sass_get_lineno (void );

void sass_set_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int sass_wrap (void );
#else
extern int sass_wrap (void );
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( sass_text, sass_leng, 1, sass_out )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( sass_in )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( sass_in ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, sass_in))==0 && ferror(sass_in)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(sass_in); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int sass_lex (void);

#define YY_DECL int sass_lex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after sass_text and sass_leng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 65 "sass.l"

	/*Translation rules*/

	/*Compiler directives*/

	/*constant memory directives*/

	/*guard predicate*/

	/*label*/

#line 1403 "sass_lexer.cc"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! sass_in )
			sass_in = stdin;

		if ( ! sass_out )
			sass_out = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			sass_ensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				sass__create_buffer(sass_in,YY_BUF_SIZE );
		}

		sass__load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of sass_text. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 883 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 882 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < sass_leng; ++yyl )
				if ( sass_text[yyl] == '\n' )
					   
    sass_lineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 76 "sass.l"
yylval.string_value = strdup(sass_text); return OSQBRACKET;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 77 "sass.l"
yylval.string_value = strdup(sass_text); return CSQBRACKET; 
	YY_BREAK
/*base instructions*/
case 3:
YY_RULE_SETUP
#line 80 "sass.l"
yylval.string_value = strdup(sass_text); return BAR;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 81 "sass.l"
yylval.string_value = strdup(sass_text); return ADA;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 82 "sass.l"
yylval.string_value = strdup(sass_text); return BRA;
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 83 "sass.l"
yylval.string_value = strdup(sass_text); return BRX;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 84 "sass.l"
yylval.string_value = strdup(sass_text); return CAL;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 85 "sass.l"
yylval.string_value = strdup(sass_text); return COS;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 86 "sass.l"
yylval.string_value = strdup(sass_text); return DADD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 87 "sass.l"
yylval.string_value = strdup(sass_text); return DMIN;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 88 "sass.l"
yylval.string_value = strdup(sass_text); return DMAX;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 89 "sass.l"
yylval.string_value = strdup(sass_text); return DFMA;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 90 "sass.l"
yylval.string_value = strdup(sass_text); return DMUL;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 91 "sass.l"
yylval.string_value = strdup(sass_text); return EX2;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 92 "sass.l"
yylval.string_value = strdup(sass_text); return F2F;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 93 "sass.l"
yylval.string_value = strdup(sass_text); return F2I;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 94 "sass.l"
yylval.string_value = strdup(sass_text); return FADD;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 95 "sass.l"
yylval.string_value = strdup(sass_text); return FADD32;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 96 "sass.l"
yylval.string_value = strdup(sass_text); return FADD32I;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 97 "sass.l"
yylval.string_value = strdup(sass_text); return FMAD;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 98 "sass.l"
yylval.string_value = strdup(sass_text); return FMAD32I;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 99 "sass.l"
yylval.string_value = strdup(sass_text); return FMUL;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 100 "sass.l"
yylval.string_value = strdup(sass_text); return FMUL32;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 101 "sass.l"
yylval.string_value = strdup(sass_text); return FMUL32I;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 102 "sass.l"
yylval.string_value = strdup(sass_text); return FSET;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 103 "sass.l"
yylval.string_value = strdup(sass_text); return DSET;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 104 "sass.l"
yylval.string_value = strdup(sass_text); return G2R;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 105 "sass.l"
yylval.string_value = strdup(sass_text); return GLD;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 106 "sass.l"
yylval.string_value = strdup(sass_text); return GST;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 107 "sass.l"
yylval.string_value = strdup(sass_text); return I2F;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 108 "sass.l"
yylval.string_value = strdup(sass_text); return I2I;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 109 "sass.l"
yylval.string_value = strdup(sass_text); return S2R;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 110 "sass.l"
yylval.string_value = strdup(sass_text); return STS;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 111 "sass.l"
yylval.string_value = strdup(sass_text); return SASS_LD;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 112 "sass.l"
yylval.string_value = strdup(sass_text); return SASS_ST;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 113 "sass.l"
yylval.string_value = strdup(sass_text); return IADD;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 114 "sass.l"
yylval.string_value = strdup(sass_text); return IADDCARRY;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 115 "sass.l"
yylval.string_value = strdup(sass_text); return IADD32;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 116 "sass.l"
yylval.string_value = strdup(sass_text); return IADD32I;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 117 "sass.l"
yylval.string_value = strdup(sass_text); return IMAD;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 118 "sass.l"
yylval.string_value = strdup(sass_text); return ISAD;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 119 "sass.l"
yylval.string_value = strdup(sass_text); return IMAD24;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 120 "sass.l"
yylval.string_value = strdup(sass_text); return IMAD24;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 121 "sass.l"
yylval.string_value = strdup(sass_text); return IMAD32;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 122 "sass.l"
yylval.string_value = strdup(sass_text); return IMAD32I;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 123 "sass.l"
yylval.string_value = strdup(sass_text); return IMUL;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 124 "sass.l"
yylval.string_value = strdup(sass_text); return IMUL24;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 125 "sass.l"
yylval.string_value = strdup(sass_text); return IMULS24;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 126 "sass.l"
yylval.string_value = strdup(sass_text); return IMUL24H;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 127 "sass.l"
yylval.string_value = strdup(sass_text); return IMUL32;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 128 "sass.l"
yylval.string_value = strdup(sass_text); return IMUL32S24;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 129 "sass.l"
yylval.string_value = strdup(sass_text); return IMUL32U24;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 130 "sass.l"
yylval.string_value = strdup(sass_text); return IMUL32I;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 131 "sass.l"
yylval.string_value = strdup(sass_text); return IMUL32IS24;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 132 "sass.l"
yylval.string_value = strdup(sass_text); return IMUL32I24;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 133 "sass.l"
yylval.string_value = strdup(sass_text); return ISET;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 134 "sass.l"
yylval.string_value = strdup(sass_text); return LG2;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 135 "sass.l"
yylval.string_value = strdup(sass_text); return LLD;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 136 "sass.l"
yylval.string_value = strdup(sass_text); return AND;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 137 "sass.l"
yylval.string_value = strdup(sass_text); return OR;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 138 "sass.l"
yylval.string_value = strdup(sass_text); return NOT;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 139 "sass.l"
yylval.string_value = strdup(sass_text); return XOR;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 140 "sass.l"
yylval.string_value = strdup(sass_text); return ANDS;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 141 "sass.l"
yylval.string_value = strdup(sass_text); return ORS;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 142 "sass.l"
yylval.string_value = strdup(sass_text); return NOTS;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 143 "sass.l"
yylval.string_value = strdup(sass_text); return XORS;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 144 "sass.l"
yylval.string_value = strdup(sass_text); return LST;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 145 "sass.l"
yylval.string_value = strdup(sass_text); return MOV;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 146 "sass.l"
yylval.string_value = strdup(sass_text); return MOV32;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 147 "sass.l"
yylval.string_value = strdup(sass_text); return MVC;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 148 "sass.l"
yylval.string_value = strdup(sass_text); return MVI;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 149 "sass.l"
yylval.string_value = strdup(sass_text); return NOP;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 150 "sass.l"
yylval.string_value = strdup(sass_text); return R2A;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 151 "sass.l"
yylval.string_value = strdup(sass_text); return R2G;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 152 "sass.l"
yylval.string_value = strdup(sass_text); return R2GU16U8;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 153 "sass.l"
yylval.string_value = strdup(sass_text); return RCP;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 154 "sass.l"
yylval.string_value = strdup(sass_text); return RCP32;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 155 "sass.l"
yylval.string_value = strdup(sass_text); return RET;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 156 "sass.l"
yylval.string_value = strdup(sass_text); return RRO;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 157 "sass.l"
yylval.string_value = strdup(sass_text); return RSQ;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 158 "sass.l"
yylval.string_value = strdup(sass_text); return SIN;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 159 "sass.l"
yylval.string_value = strdup(sass_text); return SHL;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 160 "sass.l"
yylval.string_value = strdup(sass_text); return SHR;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 161 "sass.l"
yylval.string_value = strdup(sass_text); return SSY;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 162 "sass.l"
yylval.string_value = strdup(sass_text); return BAR;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 163 "sass.l"
yylval.string_value = strdup(sass_text); return LDS;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 164 "sass.l"
yylval.string_value = strdup(sass_text); return IMIN;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 165 "sass.l"
yylval.string_value = strdup(sass_text); return IMAX;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 166 "sass.l"
yylval.string_value = strdup(sass_text); return FMAX;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 167 "sass.l"
yylval.string_value = strdup(sass_text); return FMIN;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 168 "sass.l"
yylval.string_value = strdup(sass_text); return C2R;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 169 "sass.l"
yylval.string_value = strdup(sass_text); return R2C;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 170 "sass.l"
yylval.string_value = strdup(sass_text); return A2R;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 171 "sass.l"
yylval.string_value = strdup(sass_text); return TEX;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 172 "sass.l"
yylval.string_value = strdup(sass_text); return TEX32;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 173 "sass.l"
yylval.string_value = strdup(sass_text); return EXIT;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 174 "sass.l"
yylval.string_value = strdup(sass_text); return GRED;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 175 "sass.l"
yylval.string_value = strdup(sass_text); return GATOM;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 176 "sass.l"
yylval.string_value = strdup(sass_text); return PBK;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 177 "sass.l"
yylval.string_value = strdup(sass_text); return BRK;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 178 "sass.l"
yylval.string_value = strdup(sass_text); return VOTE;
	YY_BREAK
/*instruction modifiers*/
case 102:
YY_RULE_SETUP
#line 181 "sass.l"
yylval.string_value = strdup(sass_text); return EQ;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 182 "sass.l"
yylval.string_value = strdup(sass_text); return EQU;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 183 "sass.l"
yylval.string_value = strdup(sass_text); return GE;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 184 "sass.l"
yylval.string_value = strdup(sass_text); return GEU;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 185 "sass.l"
yylval.string_value = strdup(sass_text); return GT;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 186 "sass.l"
yylval.string_value = strdup(sass_text); return GTU;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 187 "sass.l"
yylval.string_value = strdup(sass_text); return LE;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 188 "sass.l"
yylval.string_value = strdup(sass_text); return LEU;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 189 "sass.l"
yylval.string_value = strdup(sass_text); return LT;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 190 "sass.l"
yylval.string_value = strdup(sass_text); return LTU;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 191 "sass.l"
yylval.string_value = strdup(sass_text); return NE;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 192 "sass.l"
yylval.string_value = strdup(sass_text); return NEU;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 193 "sass.l"
yylval.string_value = strdup(sass_text); return DOTBEXT;
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 194 "sass.l"
yylval.string_value = strdup(sass_text); return DOTS;
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 195 "sass.l"
yylval.string_value = strdup(sass_text); return DOTSFU;
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 196 "sass.l"
yylval.string_value = strdup(sass_text); return DOTTRUNC;
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 197 "sass.l"
yylval.string_value = strdup(sass_text); return DOTCEIL;
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 198 "sass.l"
yylval.string_value = strdup(sass_text); return DOTFLOOR;
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 199 "sass.l"
yylval.string_value = strdup(sass_text); /*unknown*/
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 200 "sass.l"
yylval.string_value = strdup(sass_text); return DOTUN;
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 201 "sass.l"
yylval.string_value = strdup(sass_text); return DOTNODEP;
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 202 "sass.l"
yylval.string_value = strdup(sass_text); /*unknown*/
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 203 "sass.l"
yylval.string_value = strdup(sass_text); return DOTANY;
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 204 "sass.l"
yylval.string_value = strdup(sass_text); return DOTALL;
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 205 "sass.l"
yylval.string_value = strdup(sass_text); /*unknown*/
	YY_BREAK
/* comparison operators */
case 127:
YY_RULE_SETUP
#line 210 "sass.l"
yylval.string_value = strdup(sass_text); return DOTEQ;
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 211 "sass.l"
yylval.string_value = strdup(sass_text); return DOTEQU;
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 212 "sass.l"
yylval.string_value = strdup(sass_text); return DOTFALSE;
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 213 "sass.l"
yylval.string_value = strdup(sass_text); return DOTGE;
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 214 "sass.l"
yylval.string_value = strdup(sass_text); return DOTGEU;
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 215 "sass.l"
yylval.string_value = strdup(sass_text); return DOTGT;
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 216 "sass.l"
yylval.string_value = strdup(sass_text); return DOTGTU;
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 217 "sass.l"
yylval.string_value = strdup(sass_text); return DOTLE;
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 218 "sass.l"
yylval.string_value = strdup(sass_text); return DOTLEU;
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 219 "sass.l"
yylval.string_value = strdup(sass_text); return DOTLT;
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 220 "sass.l"
yylval.string_value = strdup(sass_text); return DOTLTU;
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 221 "sass.l"
yylval.string_value = strdup(sass_text); return DOTNE;
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 222 "sass.l"
yylval.string_value = strdup(sass_text); return DOTNEU;
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 223 "sass.l"
yylval.string_value = strdup(sass_text); return DOTNSF;
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 224 "sass.l"
yylval.string_value = strdup(sass_text); return DOTSF;
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 225 "sass.l"
yylval.string_value = strdup(sass_text); return DOTCARRY;
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 226 "sass.l"
yylval.string_value = strdup(sass_text); /*unknown*/
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 227 "sass.l"
yylval.string_value = strdup(sass_text); return DOTCC;
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 228 "sass.l"
yylval.string_value = strdup(sass_text); return DOTX;
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 229 "sass.l"
yylval.string_value = strdup(sass_text); return DOTE;
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 230 "sass.l"
yylval.string_value = strdup(sass_text); return DOTRED;
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 231 "sass.l"
yylval.string_value = strdup(sass_text); return DOTPOPC;
	YY_BREAK
/*operand types*/
case 149:
YY_RULE_SETUP
#line 234 "sass.l"
yylval.string_value = strdup(sass_text); return DOTF16;
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 235 "sass.l"
yylval.string_value = strdup(sass_text); return DOTF32;
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 236 "sass.l"
yylval.string_value = strdup(sass_text); return DOTF64;
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 237 "sass.l"
yylval.string_value = strdup(sass_text); return DOTS8;
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 238 "sass.l"
yylval.string_value = strdup(sass_text); return DOTS16;
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 239 "sass.l"
yylval.string_value = strdup(sass_text); return DOTS32;
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 240 "sass.l"
yylval.string_value = strdup(sass_text); return DOTS64;
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 241 "sass.l"
yylval.string_value = strdup(sass_text); return DOTS128;
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 242 "sass.l"
yylval.string_value = strdup(sass_text); return DOTU8;
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 243 "sass.l"
yylval.string_value = strdup(sass_text); return DOTU16;
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 244 "sass.l"
yylval.string_value = strdup(sass_text); return DOTU32;
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 245 "sass.l"
yylval.string_value = strdup(sass_text); return DOTU24;
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 246 "sass.l"
yylval.string_value = strdup(sass_text); return DOTU64;
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 247 "sass.l"
yylval.string_value = strdup(sass_text); return DOTHI;
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 248 "sass.l"
yylval.string_value = strdup(sass_text); return DOTNOINC;
	YY_BREAK
/*geometries*/
/*register operands*/
case 164:
YY_RULE_SETUP
#line 253 "sass.l"
yylval.string_value = strdup(sass_text); return REGISTER;
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 254 "sass.l"
yylval.string_value = strdup(sass_text); return REGISTERLO;
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 255 "sass.l"
yylval.string_value = strdup(sass_text); return REGISTERHI;
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 256 "sass.l"
yylval.string_value = strdup(sass_text); return OFFSETREGISTER;
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 257 "sass.l"
yylval.string_value = strdup(sass_text); return PREDREGISTER;
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 258 "sass.l"
yylval.string_value = strdup(sass_text); return PREDREGISTER2;
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 259 "sass.l"
yylval.string_value = strdup(sass_text); return PREDREGISTER3;
	YY_BREAK
case 171:
/* rule 171 can match eol */
YY_RULE_SETUP
#line 260 "sass.l"
yylval.string_value = strdup(sass_text); return SREGISTER;
	YY_BREAK
/*tex operand*/
/*vector operands*/
/*special registers*/
/* cuobjdump header */
case 172:
YY_RULE_SETUP
#line 269 "sass.l"
yylval.string_value = strdup(sass_text); return PTXHEADER;
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 270 "sass.l"
yylval.string_value = strdup(sass_text); return ELFHEADER;
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 271 "sass.l"

	YY_BREAK
case 175:
YY_RULE_SETUP
#line 272 "sass.l"
yylval.string_value = strdup(sass_text); return INFOARCHVERSION;
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 273 "sass.l"
yylval.string_value = strdup(sass_text); return INFOCODEVERSION_HEADER;
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 274 "sass.l"
yylval.string_value = strdup(sass_text); return INFOCODEVERSION;
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 275 "sass.l"
yylval.string_value = strdup(sass_text); return INFOPRODUCER;
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 276 "sass.l"
yylval.string_value = strdup(sass_text); return INFOHOST;
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 277 "sass.l"
yylval.string_value = strdup(sass_text); return INFOCOMPILESIZE;
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 278 "sass.l"
yylval.string_value = strdup(sass_text); return INFOCOMPILESIZE_HEADER;
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 279 "sass.l"
yylval.string_value = strdup(sass_text); return INFOIDENTIFIER;
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 280 "sass.l"
yylval.string_value = strdup(sass_text); return VERSIONHEADER;
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 281 "sass.l"
yylval.string_value = strdup(sass_text); return FUNCTIONHEADER;
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 282 "sass.l"
yylval.string_value = strdup(sass_text); return INSTHEX;
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 283 "sass.l"
yylval.string_value = strdup(sass_text); return DOT;
	YY_BREAK
/*memory location operands*/
case 187:
YY_RULE_SETUP
#line 286 "sass.l"
yylval.string_value = strdup(sass_text); return ABSSMEMLOCATION;
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 287 "sass.l"
yylval.string_value = strdup(sass_text); return ABSSMEMLOCATION;
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 288 "sass.l"
yylval.string_value = strdup(sass_text); return ABSSMEMLOCATION;
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 289 "sass.l"
yylval.string_value = strdup(sass_text); return ABSSMEMLOCATION;
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 291 "sass.l"
yylval.string_value = strdup(sass_text); return SMEMLOCATION;
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 292 "sass.l"
yylval.string_value = strdup(sass_text); return SMEMLOCATION;
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 293 "sass.l"
yylval.string_value = strdup(sass_text); return SMEMLOCATION;
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 294 "sass.l"
yylval.string_value = strdup(sass_text); return SMEMLOCATION;
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 296 "sass.l"
yylval.string_value = strdup(sass_text); return GMEMLOCATION;
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 297 "sass.l"
yylval.string_value = strdup(sass_text); return GMEMLOCATION;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 298 "sass.l"
yylval.string_value = strdup(sass_text); return GMEMLOCATION;
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 299 "sass.l"
yylval.string_value = strdup(sass_text); return GMEMLOCATION;
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 301 "sass.l"
yylval.string_value = strdup(sass_text); return CMEMLOCATION;
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 302 "sass.l"
yylval.string_value = strdup(sass_text); return CMEMLOCATION;
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 303 "sass.l"
yylval.string_value = strdup(sass_text); return CMEMLOCATION;
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 304 "sass.l"
yylval.string_value = strdup(sass_text); return CMEMLOCATION;
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 306 "sass.l"
yylval.string_value = strdup(sass_text); return LMEMLOCATION;
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 307 "sass.l"
yylval.string_value = strdup(sass_text); return LMEMLOCATION;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 308 "sass.l"
yylval.string_value = strdup(sass_text); return LMEMLOCATION;
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 309 "sass.l"
yylval.string_value = strdup(sass_text); return LMEMLOCATION;
	YY_BREAK
/*identifier + literals*/
case 207:
YY_RULE_SETUP
#line 313 "sass.l"
yylval.string_value = strdup(sass_text); return IDENTIFIER;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 314 "sass.l"
yylval.string_value = strdup(sass_text); return HEXLITERAL; //change to int later?
	YY_BREAK
/*label ends*/
case 209:
YY_RULE_SETUP
#line 317 "sass.l"
yylval.string_value = strdup(sass_text); return LABELSTART;
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 318 "sass.l"
yylval.string_value = strdup(sass_text); return LABELEND;
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 319 "sass.l"
yylval.string_value = strdup(sass_text); return LABEL;
	YY_BREAK
/*braces*/
/*brackets*/
case 212:
YY_RULE_SETUP
#line 324 "sass.l"
yylval.string_value = strdup(sass_text); return LEFTBRACKET;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 325 "sass.l"
yylval.string_value = strdup(sass_text); return RIGHTBRACKET;
	YY_BREAK
/* pound sign*/
/* comma*/
case 214:
YY_RULE_SETUP
#line 330 "sass.l"
/*yylval.string_value = strdup(sass_text); return COMMA;*/
	YY_BREAK
/* underscore sign*/
/* pipe*/
case 215:
YY_RULE_SETUP
#line 335 "sass.l"
yylval.string_value = strdup(sass_text); return PIPE;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 336 "sass.l"
yylval.string_value = strdup(sass_text); return TILDE;
	YY_BREAK
/*Need to create to newline tokens*/
case 217:
/* rule 217 can match eol */
YY_RULE_SETUP
#line 339 "sass.l"
return NEWLINE;
	YY_BREAK
/* semicolon */
case 218:
YY_RULE_SETUP
#line 342 "sass.l"
return SEMICOLON;
	YY_BREAK
/*discard whitespace*/
case 219:
YY_RULE_SETUP
#line 345 "sass.l"

	YY_BREAK
/*discard comments*/
case 220:
YY_RULE_SETUP
#line 347 "sass.l"

	YY_BREAK
/*discard dividers*/
case 221:
YY_RULE_SETUP
#line 349 "sass.l"

	YY_BREAK
case 222:
YY_RULE_SETUP
#line 350 "sass.l"

	YY_BREAK
/*reached end of file*/
case YY_STATE_EOF(INITIAL):
#line 354 "sass.l"
return 0;
	YY_BREAK
/*None of the rules matched. Throw error*/
case 223:
YY_RULE_SETUP
#line 357 "sass.l"
sass_error("Invalid token");
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 359 "sass.l"
ECHO;
	YY_BREAK
#line 2644 "sass_lexer.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed sass_in at a new source and called
			 * sass_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = sass_in;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( sass_wrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * sass_text, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of sass_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					sass_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			sass_restart(sass_in  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) sass_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 883 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 883 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 882);

	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					sass_restart(sass_in );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( sass_wrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve sass_text */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		   
    sass_lineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void sass_restart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        sass_ensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            sass__create_buffer(sass_in,YY_BUF_SIZE );
	}

	sass__init_buffer(YY_CURRENT_BUFFER,input_file );
	sass__load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void sass__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		sass_pop_buffer_state();
	 *		sass_push_buffer_state(new_buffer);
     */
	sass_ensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	sass__load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (sass_wrap()) processing, but the only time this flag
	 * is looked at is after sass_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void sass__load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	sass_in = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE sass__create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) sass_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in sass__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) sass_alloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in sass__create_buffer()" );

	b->yy_is_our_buffer = 1;

	sass__init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with sass__create_buffer()
 * 
 */
    void sass__delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		sass_free((void *) b->yy_ch_buf  );

	sass_free((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a sass_restart() or at EOF.
 */
    static void sass__init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	sass__flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then sass__init_buffer was _probably_
     * called from sass_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void sass__flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		sass__load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void sass_push_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	sass_ensure_buffer_stack();

	/* This block is copied from sass__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from sass__switch_to_buffer. */
	sass__load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void sass_pop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	sass__delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		sass__load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void sass_ensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)sass_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in sass_ensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)sass_realloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in sass_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE sass__scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) sass_alloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in sass__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	sass__switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to sass_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       sass__scan_bytes() instead.
 */
YY_BUFFER_STATE sass__scan_string (yyconst char * yystr )
{
    
	return sass__scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to sass_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE sass__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) sass_alloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in sass__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = sass__scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in sass__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up sass_text. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		sass_text[sass_leng] = (yy_hold_char); \
		(yy_c_buf_p) = sass_text + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		sass_leng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int sass_get_lineno  (void)
{
        
    return sass_lineno;
}

/** Get the input stream.
 * 
 */
FILE *sass_get_in  (void)
{
        return sass_in;
}

/** Get the output stream.
 * 
 */
FILE *sass_get_out  (void)
{
        return sass_out;
}

/** Get the length of the current token.
 * 
 */
int sass_get_leng  (void)
{
        return sass_leng;
}

/** Get the current token.
 * 
 */

char *sass_get_text  (void)
{
        return sass_text;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void sass_set_lineno (int  line_number )
{
    
    sass_lineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see sass__switch_to_buffer
 */
void sass_set_in (FILE *  in_str )
{
        sass_in = in_str ;
}

void sass_set_out (FILE *  out_str )
{
        sass_out = out_str ;
}

int sass_get_debug  (void)
{
        return sass__flex_debug;
}

void sass_set_debug (int  bdebug )
{
        sass__flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from sass_lex_destroy(), so don't allocate here.
     */

    /* We do not touch sass_lineno unless the option is enabled. */
    sass_lineno =  1;
    
    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    sass_in = stdin;
    sass_out = stdout;
#else
    sass_in = (FILE *) 0;
    sass_out = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * sass_lex_init()
     */
    return 0;
}

/* sass_lex_destroy is for both reentrant and non-reentrant scanners. */
int sass_lex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		sass__delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		sass_pop_buffer_state();
	}

	/* Destroy the stack itself. */
	sass_free((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * sass_lex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *sass_alloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *sass_realloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void sass_free (void * ptr )
{
	free( (char *) ptr );	/* see sass_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 359 "sass.l"



void sass_error(const char* message)
{
	printf("   "); printf("%s",message); printf(" near \""); printf("%s",sass_text); printf("\"");
	printf(" on line "); 
	char line[5]; sprintf(line, "%i", sass_lineno); printf("%s",line);
	printf("\n");
	exit(1);
}

